@page "/"
@rendermode InteractiveServer

@using WebScrapeApp.ArticleServices
@using WebScrapeApp.Services
@inject WebScrapeService webScrapeService
@inject SeleniumService seleniumService

<PageTitle>Scrape</PageTitle>

<select @onchange="UpdateUrl">
    <option value="">Select a site</option>
    @foreach (var site in sites)
    {
        <option value="@site">@site</option>
    }
</select>

<input @bind="url" placeholder="Enter URL" />
<button class="btn btn-primary" @onclick="ScrapeUrl" disabled="@isLoading">Click me</button>
<br />
<input @bind="searchText" placeholder="Enter Search Text" />
<button class="btn btn-primary" @onclick="RunAutomation" disabled="@isLoading">Click me</button>
<div>@returnStatus</div>
@if (isLoading)
{
    <div class="loading-mask">
        <p>Loading...</p>
    </div>
}
@if (scrapeResult != null)
{
    <div>
        <h5>URL</h5>
        <p>@scrapeResult.Url</p>
    </div>
    <div>
        @if (scrapeResult.Emails != null && scrapeResult.Emails.Count > 0)
        {
            <h5>Email Results</h5>
            foreach (var item in scrapeResult.Emails)
            {
                <p>@item</p>
            }
        }
    </div>
    <div>
        @if (scrapeResult.Links != null && scrapeResult.Links.Count > 0)
        {
            <h5>Links</h5>
            foreach (var item in scrapeResult.Links)
            {
                <p>@item</p>
            }
        }
    </div>
    <div>
        @if (scrapeResult.Content != null)
        {
            <h5>Scrape Result</h5>
            <p>@scrapeResult.Content</p>
        }
    </div>
}

@code {
    private string url = "https://immunology.insightscience.org";
    private string searchText;
    private ScrapeResult scrapeResult = new ScrapeResult();
    private bool isLoading = false;
    private string returnStatus = string.Empty;
    //private string selectedSite;
    private string[] sites = new string[]
    {
        "https://journals.sagepub.com/",
        "https://www.springer.com/",
        "https://www.nature.com",
        "https://pubs.acs.org/journal/jacsat ",
        "https://journals.aps.org/prl",
        "https://journals.sagepub.com/",
        "https://www.tandfonline.com/",
        "https://onlinelibrary.wiley.com/",
        "https://journals.plos.org/plosone/",
        "https://www.hindawi.com/",
        "https://www.sciencedirect.com/",
        "https://pubs.acs.org/",
        "https://link.springer.com/",
        "https://academic.oup.com/journals/",
        "https://www.nature.com/",
        "https://www.elsevier.com/",
        "https://www.tandfonline.com/",
        "https://www.springer.com/",
        "https://www.elsevier.com/",


        "https://pubmed.ncbi.nlm.nih.gov/advanced/",
        "https://europepmc.org/",
        "https://www.sciencedirect.com/",
        "https://onlinelibrary.wiley.com/",
        "https://journals.plos.org/plosone/"
    };

    private void UpdateUrl(ChangeEventArgs e)
    {
        url = e.Value.ToString();
    }

    private async Task ScrapeUrl()
    {
        Console.WriteLine("ScrapeUrl method triggered"); // Log statement
        scrapeResult = new ScrapeResult();
        isLoading = true;
        StateHasChanged();
        try
        {
            if (!string.IsNullOrEmpty(url))
            {
                scrapeResult = await webScrapeService.ScrapUrlDynamic(url);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}"); // Log any errors
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void RunAutomation()
    {
        try
        {
            returnStatus = string.Empty; // Reset return status
            if (!string.IsNullOrEmpty(searchText))
            {
                Mdpi mdpi = new Mdpi();
                mdpi.RunSelenium(searchText);
                // SagePub sagePub = new SagePub();
                // sagePub.RunSelenium(searchText);
            }
        }
        catch (Exception ex)
        {
            returnStatus = $"Error: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}"); // Log any errors
        }
    }
}

